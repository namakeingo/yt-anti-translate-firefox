name: Create Release with tag

# This will create a new relase tagged with the version specified in the 'app/manifest.json'
# This is skipped for PR titles that start with [CI-FIX] (case insensitive)
# if the souce branch name is prepended with 'fix-' the release title will be 'v$VERSION - Fix'
# Else the release title will be with 'v$VERSION'
# CHANGELOG.md is used to populate the body of the release before any auto generated notes

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - master

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check PR title for [CI-FIX]
        id: check_ci_fix
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          if echo "$TITLE" | grep -iq '^\[ci-fix\]'; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Get version from manifest.json
        id: get_version
        run: |
          VERSION=$(jq -r .version app/manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        run: |
          VERSION="${{ env.VERSION }}"
          START_LINE=$(grep -En "^## \[$VERSION\]" CHANGELOG.md | cut -d: -f1)

          if [ -z "$START_LINE" ]; then
            echo "Could not find changelog for version $VERSION"
            exit 1
          fi

          TOTAL_LINES=$(wc -l < CHANGELOG.md)
          END_LINE=$((TOTAL_LINES + 1))

          tail -n +$((START_LINE + 1)) CHANGELOG.md | grep -En "^## \[[0-9]+\." | head -n1 | while IFS=: read -r rel_line _; do
            END_LINE=$((START_LINE + rel_line - 1))
          done

          sed -n "${START_LINE},$((END_LINE - 1))p" CHANGELOG.md > release_notes.txt

          # Determine previous version from changelog
          PREVIOUS=$(grep -E "^## \[[0-9]+\." CHANGELOG.md | grep -v "\[$VERSION\]" | head -n1 | sed -E 's/^## \[([0-9.]+)\].*/\1/')

          REPO_URL="https://github.com/${{ github.repository }}"

          echo "" >> release_notes.txt
          echo "**Full Changelog**: $REPO_URL/compare/v$PREVIOUS...v$VERSION" >> release_notes.txt

          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set release name suffix
        id: suffix
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          if echo "$BRANCH_NAME" | grep -iq '^fix-'; then
            echo "suffix= Fix" >> $GITHUB_OUTPUT
          else
            echo "suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.check_ci_fix.outputs.skip == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_version.outputs.tag }}
          name: ${{ env.VERSION }}${{ steps.suffix.outputs.suffix }}
          body: ${{ steps.changelog.outputs.body }}

      - name: Save release info instead (CI-FIX skip)
        if: steps.check_ci_fix.outputs.skip == 'true'
        run: |
          echo "Release would have been skipped due to [CI-FIX] PR title." > skipped_release_info.txt
          echo "Tag: ${{ steps.get_version.outputs.tag }}" >> skipped_release_info.txt
          echo "Name: ${{ env.VERSION }}${{ steps.suffix.outputs.suffix }}" >> skipped_release_info.txt
          echo "Body:" >> skipped_release_info.txt
          echo "${{ steps.changelog.outputs.body }}" >> skipped_release_info.txt

      - name: Upload skipped release info
        if: steps.check_ci_fix.outputs.skip == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: skipped-release-info
          path: skipped_release_info.txt
