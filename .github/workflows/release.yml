name: Create Release with tag

# This will create a new relase tagged with the version specified in the 'app/manifest.json'
# This is skipped for PR titles that start with [CI-FIX] (case insensitive)
# if the souce branch name is prepended with 'fix-' the release title will be 'v$VERSION - Fix'
# Else the release title will be with 'v$VERSION'
# CHANGELOG.md is used to populate the body of the release before any auto generated notes

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - master

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check PR title for [CI-FIX]
        id: check_ci_fix
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          if echo "$TITLE" | grep -iq '^\[ci-fix\]'; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Get version from manifest.json
        id: get_version
        run: |
          VERSION=$(jq -r .version app/manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Extract release notes
        run: |
          set -euxo pipefail

          CHANGELOG_FILE="CHANGELOG.md"

          # Get the latest tag that matches semver
          TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n1)

          if [ -z "$TAG" ]; then
            echo "‚ùå No valid semver tag found (vX.Y.Z)"
            exit 1
          fi

          VERSION="${TAG#v}"
          echo "üì¶ Extracting release notes for version: $VERSION"

          # Find the start line of the current version section
          START_LINE=$(grep -n "^## \[$VERSION\]" "$CHANGELOG_FILE" | cut -d: -f1)
          if [ -z "$START_LINE" ]; then
            echo "‚ùå Could not find changelog section for version $VERSION"
            exit 1
          fi

          # Find the line number of the next version section, or EOF
          END_LINE=$(tail -n +$((START_LINE + 1)) "$CHANGELOG_FILE" | grep -n "^## \[" | head -n1 | cut -d: -f1)

          if [ -z "$END_LINE" ]; then
            END_LINE=$(wc -l < "$CHANGELOG_FILE")
          else
            END_LINE=$((START_LINE + END_LINE - 1))
          fi

          # Extract the lines AFTER the heading (START_LINE+1 to END_LINE-1)
          echo "‚úÇÔ∏è  Extracting lines $((START_LINE + 1)) to $((END_LINE - 1))"
          sed -n "$((START_LINE + 1)),$((END_LINE - 1))p" "$CHANGELOG_FILE" > release_notes.txt

          # Find previous version tag
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | grep -v "^$TAG\$" | head -n1)

          # Get repo info
          REPO_URL=$(git config --get remote.origin.url | sed -E 's/\.git$//' | sed -E 's#git@github.com:#https://github.com/#')

          # Add Full Changelog link
          if [ -n "$PREV_TAG" ]; then
            echo "" >> release_notes.txt
            echo "**Full Changelog**: $REPO_URL/compare/$PREV_TAG...$TAG" >> release_notes.txt
            echo "üîó Added compare link: $REPO_URL/compare/$PREV_TAG...$TAG"
          else
            echo "‚ö†Ô∏è  No previous tag found, skipping Full Changelog link"
          fi

          echo "‚úÖ Release notes written to release_notes.txt"

      - name: Set release name suffix
        id: suffix
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          if echo "$BRANCH_NAME" | grep -iq '^fix-'; then
            echo "suffix= Fix" >> $GITHUB_OUTPUT
          else
            echo "suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.check_ci_fix.outputs.skip == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_version.outputs.tag }}
          name: ${{ env.VERSION }}${{ steps.suffix.outputs.suffix }}
          body: release_notes.txt

      - name: Save release info instead (CI-FIX skip)
        if: steps.check_ci_fix.outputs.skip == 'true'
        run: |
          echo "Release would have been skipped due to [CI-FIX] PR title." > skipped_release_info.txt
          echo "Tag: ${{ steps.get_version.outputs.tag }}" >> skipped_release_info.txt
          echo "Name: ${{ env.VERSION }}${{ steps.suffix.outputs.suffix }}" >> skipped_release_info.txt
          echo -e "Body:\n$(cat release_notes.txt)" >> skipped_release_info.txt

      - name: Upload skipped release info
        if: steps.check_ci_fix.outputs.skip == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: skipped-release-info
          path: skipped_release_info.txt
